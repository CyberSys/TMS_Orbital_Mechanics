// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.1
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

using KSP;
using UnityEngine;
using Contracts;
using Contracts.Parameters;
using System;
using System.Collections.Generic;
using System.Linq;

namespace TMS_Stargate
{

    public class CreateGates : MonoBehaviour
    {

        //Define a load of lists and variables
        private List<ConfigNode> stargateList = new List<ConfigNode>();
        private CelestialBody gateBody = null;
        private string _planet;
        public string stargateName = "Unnamed Stargate";

        [SerializeField]
        //protected CelestialBody targetBody;
        protected string stargateID;

        public List<ConfigNode> GetProtoGate()
        {
            //Defines our list of Stargates
            Debug.Log("TMS ORBITAL MECHANICS - Defining our Gate List");
            List<ConfigNode> Stargates = new List<ConfigNode>();
            Debug.Log("TMS ORBITAL MECHANICS - Defined our Gate List");

            //Loops through all the configs to find any starting with a Node called STARGATE
            Debug.Log("TMS ORBITAL MECHANICS - About to Start our first foreach Loop");
            foreach (ConfigNode gates in GameDatabase.Instance.GetConfigNodes("STARGATE"))
            {
                Debug.Log("TMS ORBITAL MECHANICS - Gates in list = " + Stargates.Count);
                Debug.Log("TMS ORBITAL MECHANICS - found STARGATE node");
                Debug.Log("TMS ORBITAL MECHANICS - About to Start our Second ForEach loop");
                //Finds all the VESSEL Nodes in our Configs
                foreach (ConfigNode stargate_candidate in gates.GetNodes("VESSEL"))
                {
                    //Adds any relevant items from the Configs to our Stargate List
                    Debug.Log("TMS ORBITAL MECHANICS - found VESSEL node");
                    Debug.Log("TMS ORBITAL MECHANICS - Adding to candidate List");
                    Stargates.Add(stargate_candidate);
                    Debug.Log("TMS ORBITAL MECHANICS - Gates in list = " + Stargates.Count);
                }
            }
            //Sends the completed list back to the main bit
            Debug.Log("TMS ORBITAL MECHANICS - Returning Info");
            return Stargates;
        }

        public void BuildGate(string planet)
        {
            //Defines which planet/moon we are referencing
            this._planet = planet;
            Debug.Log("The Commencement has Beginulated");
            foreach (CelestialBody targetBody in FlightGlobals.Bodies)
            {
                Debug.Log("TMS ORBITAL MECHANICS - Found Body " + targetBody);
                if (targetBody.name == _planet)
                    gateBody = targetBody;
            }
            Debug.Log("Locked on to " + gateBody);

            Debug.Log("TMS ORBITAL MECHANICS - Trying to Spawn a Gate");            
            //Sends a request to 'GetProtoGate' to grab info we can use.
            Debug.Log("TMS ORBITAL MECHANICS - Going to GetProtoGate");
            stargateList = GetProtoGate();
            Debug.Log("TMS ORBITAL MECHANICS - Coming back from GetProtoGate");

            //Checks to make sure we're getting something back
            if (stargateList.Count <= 0)
            {
                Debug.Log("TMS ORBITAL MECHANICS - about to return false (empty fleet nodes; unable to spawn)");
                //return false;
            }

            //Give our Stargate a name
            stargateName = gateBody.bodyName + " Stargate";
            Debug.Log("TMS ORBITAL MECHANICS - Stargate Name = " + stargateName);

            //Defines out unique flightID
            Debug.Log("TMS ORBITAL MECHANICS - assign Flight ID");
            uint uniqueFlightID = ShipConstruction.GetUniqueFlightID(HighLogic.CurrentGame.flightState);
            //Debug.Log("TMS ORBITAL MECHANICS - Stargate Name" + stargateList[0].values);

            //Tries to get all the parts from our loaded vessel config file
            Debug.Log("TMS ORBITAL MECHANICS - Get Parts");
            
            ConfigNode[] stargateParts = stargateList[0].GetNodes("PART");

            Debug.Log("TMS ORBITAL MECHANICS - Stargate Name " + stargateList[0].GetValue("ship"));
            Debug.Log("TMS ORBITAL MECHANICS - Stargate Description " + stargateList[0].GetValue("description"));
            Debug.Log("TMS ORBITAL MECHANICS - Part Name" + stargateParts[0].GetValue("part"));

            //Define our orbit details (Needs heavy editing to put our gates exactly where we want them.  Ideally getting info from TMS_Stargate.cs)
            Debug.Log("TMS ORBITAL MECHANICS - Defining Orbit Details");
            double lowOrbit = Math.Max(gateBody.Radius + gateBody.Radius * 0.15, gateBody.Radius + (double)gateBody.atmosphereDepth * 2.0);
            double highOrbit = Math.Max(gateBody.Radius + gateBody.Radius * 0.2, gateBody.Radius + (double)gateBody.atmosphereDepth * 2.3);
            Debug.Log("TMS ORBITAL MECHANICS - Defining Parameters config node");

            //Define our parameters node (not actually sure what this does if honest)
            ConfigNode[] parameters = new ConfigNode[] { ProtoVessel.CreateDiscoveryNode(DiscoveryLevels.Unowned, UntrackedObjectClass.A, 50000 * 2.0, 50000 * 2.0) };

            //Assign our orbit details to our actual orbit
            Debug.Log("TMS ORBITAL MECHANICS - Creating Orbit details");
            Orbit orbit = Orbit.CreateRandomOrbitAround(this.gateBody, lowOrbit, highOrbit);
            
            //Define and add our details to the ProtoVessel
            Debug.Log("TMS ORBITAL MECHANICS - Adding all info to the ProtoVesselNode");
            ConfigNode protoVesselNode = ProtoVessel.CreateVesselNode(stargateName,
                                                                       VesselType.Station,
                                                                       orbit,
                                                                       0,
                                                                       stargateParts,
                                                                       parameters
                                                                       );

            //Add our ProtoVessel to the game
            Debug.Log("TMS ORBITAL MECHANICS - Adding our Gate to the game(I think)");
            ProtoVessel protoVessel = HighLogic.CurrentGame.AddVessel(protoVesselNode);

        }


        protected void OnLoad(ConfigNode node)
        {
            //if (node.HasValue("body"))
            //    this.targetBody = FlightGlobals.fetch.bodies[int.Parse(node.GetValue("body"))];
            if (node.HasValue("stargateName"))
                this.stargateName = node.GetValue("stargateName");
            if (node.HasValue("stationID"))
                this.stargateID = node.GetValue("stargateID");
        }

        protected void OnSave(ConfigNode node)
        {
            // body
            // ship ID
            // ship name
            //node.AddValue("body", this.targetBody.flightGlobalsIndex);
            node.AddValue("stationName", this.stargateName);
            node.AddValue("stationID", this.stargateID);
        }






    }
}